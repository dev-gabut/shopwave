// ***************** schema prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(BUYER)
  imageUrl  String?
  createdAt DateTime @default(now())

  addresses Address[]
  shop      Shop?
  orders    Order[]
  reviews   Review[]
}

model Address {
  id         String     @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  label      String
  address    String
  city       String
  province   String
  postalCode String
  isDefault  Boolean @default(false)
  orders     Order[]
}

model Shop {
  id          String      @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String      @unique
  shopName    String
  description String
  imageUrl    String?  
  createdAt   DateTime @default(now())
  products    Product[]
}

model Showcase {
  id       String        @id @default(uuid())
  name     String
  parentId String?
  parent   Showcase?  @relation("ShowcaseParent", fields: [parentId], references: [id])
  children Showcase[] @relation("ShowcaseParent")
  products Product[]
}

model Product {
  id          String       @id @default(uuid())
  shop        Shop      @relation(fields: [shopId], references: [id])
  shopId      String
  name        String
  description String
  price       Decimal   @db.Decimal(12, 2)
  stock       Int
  category    Category
  showcaseId  String?
  showcase    Showcase? @relation(fields: [showcaseId], references: [id])
  createdAt   DateTime  @default(now())

  images     ProductImage[]
  orderItems OrderItem[]
  reviews    Review[]
}

model ProductImage {
  id        String     @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  imageUrl  String
  isPrimary Boolean @default(false)
}

model Order {
  id          String         @id @default(uuid())
  buyer       User        @relation(fields: [buyerId], references: [id])
  buyerId     String
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   String
  totalAmount Decimal     @db.Decimal(12, 2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())

  items     OrderItem[]
  payment   Payment?
  shippings Shipping[]
}

model OrderItem {
  id        String     @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(12, 2)
}

model Payment {
  id            String           @id @default(uuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String           @unique
  method        String
  paymentStatus PaymentStatus @default(WAITING)
  paidAt        DateTime?
}

model Shipping {
  id             String            @id @default(uuid())
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        String
  courierName    String
  trackingNumber String
  status         ShippingStatus @default(AWAITING_PICKUP)
  shippedAt      DateTime?
  deliveredAt    DateTime?

  logs ShippingStatusLog[]
}

model ShippingStatusLog {
  id         String            @id @default(uuid())
  shipping   Shipping       @relation(fields: [shippingId], references: [id])
  shippingId String
  status     ShippingStatus
  note       String?
  timestamp  DateTime       @default(now())
}

model Review {
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

// ENUMs

enum Category {
  ELECTRONICS
  FASHION
  FOOD
  BEAUTY
  HOME
  TOYS
  SPORTS
  BOOKS
  OTHER
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  WAITING
  PAID
  FAILED
}

enum ShippingStatus {
  AWAITING_PICKUP
  IN_TRANSIT
  DELIVERED
  FAILED
}
