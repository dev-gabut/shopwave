// ***************** schema prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(BUYER)
  createdAt DateTime @default(now())

  addresses Address[]
  shop      Shop?
  orders    Order[]
  reviews   Review[]
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  label      String
  address    String
  city       String
  province   String
  postalCode String
  isDefault  Boolean  @default(false)
  orders     Order[]
}

model Shop {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  shopName    String
  description String
  createdAt   DateTime  @default(now())

  products    Product[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  parentId  Int?
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryParent")
  products  Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  shop        Shop          @relation(fields: [shopId], references: [id])
  shopId      Int
  name        String
  description String
  price       Decimal       @db.Decimal(12, 2)
  stock       Int
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  createdAt   DateTime      @default(now())

  images      ProductImage[]
  orderItems  OrderItem[]
  reviews     Review[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  imageUrl  String
  isPrimary Boolean @default(false)
}

model Order {
  id          Int         @id @default(autoincrement())
  buyer       User        @relation(fields: [buyerId], references: [id])
  buyerId     Int
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int
  totalAmount Decimal     @db.Decimal(12, 2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())

  items       OrderItem[]
  payment     Payment?
  shippings   Shipping[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(12, 2)
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int   @unique
  method        String
  paymentStatus PaymentStatus @default(WAITING)
  paidAt        DateTime?
}

model Shipping {
  id             Int               @id @default(autoincrement())
  order          Order             @relation(fields: [orderId], references: [id])
  orderId        Int
  courierName    String
  trackingNumber String
  status         ShippingStatus    @default(AWAITING_PICKUP)
  shippedAt      DateTime?
  deliveredAt    DateTime?

  logs           ShippingStatusLog[]
}

model ShippingStatusLog {
  id          Int        @id @default(autoincrement())
  shipping    Shipping   @relation(fields: [shippingId], references: [id])
  shippingId  Int
  status      ShippingStatus
  note        String?
  timestamp   DateTime   @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

// ENUMs

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  WAITING
  PAID
  FAILED
}

enum ShippingStatus {
  AWAITING_PICKUP
  IN_TRANSIT
  DELIVERED
  FAILED
}
